{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pedro\\\\Documents\\\\Github\\\\IWLaWiki\\\\frontend\\\\lawiki\\\\src\\\\Ventanas\\\\WikiDetalle.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ArticulosWiki from \"../Componentes/ArticulosWiki\";\nimport ResultadosBusqueda from '../Componentes/ResultadosBusqueda';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction WikiDetalle() {\n  _s();\n  const {\n    nombre\n  } = useParams(); // Obtener el nombre de la URL\n  const [wiki, setWiki] = useState(null); // Estado para almacenar los detalles de la wiki\n  const [listaArticulos, setlistaArticulos] = useState([]);\n  const [listaBusqueda, setListaBusqueda] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(\"\"); // Término con debounce.\n\n  // Petición fetch inicial\n  useEffect(() => {\n    fetchWikiDatos();\n    fetchArticulosWiki();\n  }, [nombre]);\n  useEffect(() => {\n    // Configura un debounce: espera 300ms antes de actualizar el término de búsqueda.\n    const handler = setTimeout(() => {\n      setDebouncedSearchTerm(searchTerm);\n    }, 300);\n    return () => {\n      clearTimeout(handler); // Limpia el temporizador si el usuario sigue escribiendo.\n    };\n  }, [searchTerm]);\n  useEffect(() => {\n    if (debouncedSearchTerm.trim()) {\n      fetchBusqueda(debouncedSearchTerm);\n    } else {\n      setListaBusqueda([]); // Limpia los resultados si no hay término de búsqueda.\n    }\n  }, [debouncedSearchTerm]);\n  const fetchWikiDatos = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8001/api/v1/wikis/${nombre}`);\n      const data = await response.json();\n      setWiki(data); // Carga las wikis destacadas.\n    } catch (error) {\n      console.error(\"Error al obtener los detalles de la wiki:\", error);\n    }\n  };\n  const fetchArticulosWiki = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8002/api/v1/wikis/${nombre}/articulos`);\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setlistaArticulos(data); // Carga las wikis destacadas.\n      } else {\n        console.error(\"Error: La respuesta no es una lista.\");\n      }\n    } catch (error) {\n      console.error(\"Error al obtener la lista de articulos:\", error);\n    }\n  };\n  const fetchBusqueda = async term => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8002/api/v1/wikis/${nombre}/articulos`, {\n        method: \"POST\",\n        // Cambiamos a POST\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          terminoDeBusqueda: term\n        }) // Pasamos el término como JSON\n      });\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setListaBusqueda(data); // Actualiza los resultados de búsqueda.\n      } else {\n        console.error(\"Error: La respuesta no es una lista.\");\n      }\n    } catch (error) {\n      console.error(\"Error al buscar artículos:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: wiki ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: wiki.nombre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: wiki.descripcion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value),\n          placeholder: \"Buscar Articulos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), searchTerm != \"\" ? /*#__PURE__*/_jsxDEV(ResultadosBusqueda, {\n        listaBusqueda: listaBusqueda,\n        nombrewiki: nombre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(ArticulosWiki, {\n        listaArticulos: listaArticulos,\n        nombre: nombre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando detalles de la wiki...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(WikiDetalle, \"km+Tz+KHmrfeF4pbfvfPEG7VZkA=\", false, function () {\n  return [useParams];\n});\n_c = WikiDetalle;\nexport default WikiDetalle;\nvar _c;\n$RefreshReg$(_c, \"WikiDetalle\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ArticulosWiki","ResultadosBusqueda","jsxDEV","_jsxDEV","Fragment","_Fragment","WikiDetalle","_s","nombre","wiki","setWiki","listaArticulos","setlistaArticulos","listaBusqueda","setListaBusqueda","searchTerm","setSearchTerm","debouncedSearchTerm","setDebouncedSearchTerm","fetchWikiDatos","fetchArticulosWiki","handler","setTimeout","clearTimeout","trim","fetchBusqueda","response","fetch","data","json","error","console","Array","isArray","term","method","headers","body","JSON","stringify","terminoDeBusqueda","children","fileName","_jsxFileName","lineNumber","columnNumber","descripcion","className","type","value","onChange","e","target","placeholder","nombrewiki","_c","$RefreshReg$"],"sources":["C:/Users/Pedro/Documents/Github/IWLaWiki/frontend/lawiki/src/Ventanas/WikiDetalle.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ArticulosWiki from \"../Componentes/ArticulosWiki\";\r\nimport ResultadosBusqueda from '../Componentes/ResultadosBusqueda';\r\n\r\nfunction WikiDetalle() {\r\n  const { nombre } = useParams(); // Obtener el nombre de la URL\r\n  const [wiki, setWiki] = useState(null); // Estado para almacenar los detalles de la wiki\r\n  const [listaArticulos, setlistaArticulos] = useState([]);\r\n  const [listaBusqueda, setListaBusqueda] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState(\"\"); // Término con debounce.\r\n\r\n\r\n  // Petición fetch inicial\r\n  useEffect(() => {\r\n    fetchWikiDatos();\r\n    fetchArticulosWiki();\r\n  }, [nombre]);\r\n\r\n  useEffect(() => {\r\n    // Configura un debounce: espera 300ms antes de actualizar el término de búsqueda.\r\n    const handler = setTimeout(() => {\r\n      setDebouncedSearchTerm(searchTerm);\r\n    }, 300);\r\n\r\n    return () => {\r\n      clearTimeout(handler); // Limpia el temporizador si el usuario sigue escribiendo.\r\n    };\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    if (debouncedSearchTerm.trim()) {\r\n      fetchBusqueda(debouncedSearchTerm);\r\n    } else {\r\n      setListaBusqueda([]); // Limpia los resultados si no hay término de búsqueda.\r\n    }\r\n  }, [debouncedSearchTerm]);\r\n\r\n\r\n\r\n  const fetchWikiDatos = async () => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:8001/api/v1/wikis/${nombre}`);\r\n      const data = await response.json();\r\n      setWiki(data); // Carga las wikis destacadas.\r\n    } catch (error) {\r\n      console.error(\"Error al obtener los detalles de la wiki:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchArticulosWiki = async () => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:8002/api/v1/wikis/${nombre}/articulos`);\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        setlistaArticulos(data); // Carga las wikis destacadas.\r\n      } else {\r\n        console.error(\"Error: La respuesta no es una lista.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al obtener la lista de articulos:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchBusqueda = async (term) => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:8002/api/v1/wikis/${nombre}/articulos`, {\r\n        method: \"POST\", // Cambiamos a POST\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ terminoDeBusqueda: term }), // Pasamos el término como JSON\r\n      });\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        setListaBusqueda(data); // Actualiza los resultados de búsqueda.\r\n      } else {\r\n        console.error(\"Error: La respuesta no es una lista.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al buscar artículos:\", error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {wiki ? (\r\n        <>\r\n          <h1>{wiki.nombre}</h1>\r\n          <p>{wiki.descripcion}</p>\r\n          <div className=\"input\">\r\n            <input\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              placeholder=\"Buscar Articulos...\"\r\n            />\r\n          </div>\r\n\r\n          {searchTerm != \"\" ? (\r\n            <ResultadosBusqueda listaBusqueda={listaBusqueda} nombrewiki={nombre}/>\r\n          ) : (\r\n            <ArticulosWiki listaArticulos={listaArticulos} nombre={nombre} />\r\n          )}\r\n\r\n        </>\r\n      ) : (\r\n        <p>Cargando detalles de la wiki...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WikiDetalle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}